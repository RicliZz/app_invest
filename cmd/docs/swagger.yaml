definitions:
  AdminService.SearchParams:
    properties:
      HaveStartups:
        example: false
        type: boolean
      NotConfirmed:
        example: false
        type: boolean
    type: object
  authModel.RequestSignInPayload:
    properties:
      email:
        example: admin@mail.ru
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  authModel.RequestSignUpPayload:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      middleName:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - middleName
    - password
    type: object
  enums.StartUpStage:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - IDEA
    - PROTOTYPE
    - PRODUCT
  enums.StartUpStatus:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - CLOSE
    - ACTIVE
  enums.StartUpTopic:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - SPORT
    - TEACHING
    - CAR
  requests.UpdateStartupRequest:
    properties:
      fundingGoal:
        description: required
        type: number
      historyOfCreation:
        type: string
      idea:
        type: string
      offeredPercent:
        description: required
        type: number
      stage:
        $ref: '#/definitions/enums.StartUpStage'
      status:
        allOf:
        - $ref: '#/definitions/enums.StartUpStatus'
        description: required
      strategy:
        type: string
      title:
        description: required
        type: string
      topic:
        allOf:
        - $ref: '#/definitions/enums.StartUpTopic'
        description: required
    type: object
  responses.UserDetailsResponse:
    properties:
      balance:
        type: number
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      middleName:
        type: string
      password:
        type: string
      userDetails:
        $ref: '#/definitions/responses.UserDetailsResponse'
    type: object
  startUpModel.FounderSocials:
    properties:
      instagramLink:
        type: string
      telegramLink:
        type: string
      vkLink:
        type: string
      website:
        type: string
      whatsUpLink:
        type: string
    type: object
  startUpModel.StartUp:
    properties:
      createdAt:
        description: Информация о дате создания и апдейта
        type: string
      founderEmail:
        type: string
      founderFullName:
        description: Информация о создателе
        type: string
      founderSocials:
        $ref: '#/definitions/startUpModel.FounderSocials'
      fundingGoal:
        description: цель по финансированию, сколько нужно собрать
        type: number
      historyOfCreation:
        type: string
      id:
        type: integer
      idea:
        type: string
      offeredPercent:
        description: предлагаемый процент инвестору
        type: number
      stage:
        $ref: '#/definitions/enums.StartUpStage'
      status:
        $ref: '#/definitions/enums.StartUpStatus'
      strategy:
        type: string
      title:
        description: Информация о стартапе
        type: string
      topic:
        $ref: '#/definitions/enums.StartUpTopic'
      updatedAt:
        type: string
      userid:
        type: integer
    required:
    - fundingGoal
    - offeredPercent
    - status
    - title
    - topic
    type: object
  userModel.User:
    properties:
      aboutMe:
        type: string
      confirmed:
        type: boolean
      email:
        type: string
      emailConfirm:
        type: boolean
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      middleName:
        type: string
      password:
        type: string
      role:
        type: string
      startUps:
        items:
          $ref: '#/definitions/startUpModel.StartUp'
        type: array
      userDetails:
        $ref: '#/definitions/userModel.UserDetails'
    type: object
  userModel.UserDetails:
    properties:
      balance:
        type: number
      id:
        type: integer
      userId:
        type: integer
    type: object
info:
  contact: {}
  description: This is a sample server for demonstrating JWT with Swagger.
  title: HaveIdea
  version: "1.0"
paths:
  /admin/as-user/{id}:
    post:
      consumes:
      - application/json
      description: Только админ
      parameters:
      - description: ID пользователя, под которым надо войти
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: JWT токен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверные параметры
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Зайти под пользователем
      tags:
      - Admin
  /admin/get-all:
    post:
      consumes:
      - application/json
      description: ФИО/Название стартапа
      parameters:
      - description: Параметры поиска
        in: body
        name: searchParams
        required: true
        schema:
          $ref: '#/definitions/AdminService.SearchParams'
      produces:
      - application/json
      responses:
        "200":
          description: Найденные пользователи
          schema:
            items:
              $ref: '#/definitions/userModel.User'
            type: array
        "400":
          description: Неверные параметры
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Найти всех пользователей по параметрам
      tags:
      - Admin
  /admin/search-one/{id}:
    post:
      consumes:
      - application/json
      description: ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Найденный юзер
          schema:
            $ref: '#/definitions/userModel.User'
        "400":
          description: Пользователь по ID не найден
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Найти пользователя по ID
      tags:
      - Admin
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Вход в систему
      parameters:
      - description: Данные для входа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authModel.RequestSignInPayload'
      produces:
      - application/json
      responses:
        "200":
          description: JWT токен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
      summary: sign-in
      tags:
      - Authorization
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Регистрация в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authModel.RequestSignUpPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: sign-up
      tags:
      - Authorization
  /info/about-us:
    get:
      consumes:
      - application/json
      description: Информация о нас
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: about-us
      tags:
      - Info
  /info/contacts:
    get:
      consumes:
      - application/json
      description: Контакты для связи
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: contacts
      tags:
      - Info
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: Посмотреть профиль
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Need int ID
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: getProfile
      tags:
      - Profile
  /startup/{id}/update:
    patch:
      consumes:
      - application/json
      description: Обновление стартапа
      parameters:
      - description: ID стартапа
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для создания стартапа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateStartupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: update startup
      tags:
      - StartUp
  /startup/create:
    post:
      consumes:
      - application/json
      description: Создание стартапа
      parameters:
      - description: Данные для создания стартапа
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/startUpModel.StartUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create startup
      tags:
      - StartUp
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
